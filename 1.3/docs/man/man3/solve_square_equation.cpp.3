.TH "C:/Users/Maksim/Desktop/homework/solve_square_equation/solve_square_equation.cpp" 3 "Wed Jul 24 2019" "Version 1.3" "solve_square_equation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/Maksim/Desktop/homework/solve_square_equation/solve_square_equation.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <iostream>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <float\&.h>\fP
.br
\fC#include <string>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <cassert>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "char \fBSolveSquareEquation\fP (int \fBa\fP, int \fBb\fP, int \fBc\fP, double *\fBx1\fP, double *\fBx2\fP)"
.br
.ti -1c
.RI "char \fBPrintEquation\fP (int *\fBa\fP, int *\fBb\fP, int *\fBc\fP)"
.br
.ti -1c
.RI "int \fBmain\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBa\fP = 0"
.br
.ti -1c
.RI "int \fBb\fP = 0"
.br
.ti -1c
.RI "int \fBc\fP = 0"
.br
.ti -1c
.RI "double \fBx1\fP = NAN"
.br
.ti -1c
.RI "double \fBx2\fP = NAN"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int main ()"
processing of solution of square equation
.PP
indicates that equation hasn't got any roots
.PP
indicates that equation has only one root
.PP
indicates that equation has two root
.PP
indicates that equation has infinite number of roots 
.PP
.nf
70 {
71     PrintEquation(&a, &b, &c);
73     switch (SolveSquareEquation(a,b,c,&x1,&x2))
74     {
75         case '0': 
76         {
77             std::cout << std::endl << "this equation hasn't got any roots (sorry, but it's true)" << std::endl << std::endl << "thanks for using this program" << std::endl;
78             return 0;
79         }
80         case '1': 
81         {
82             std::cout << std::endl << "the only one root that has this equation is: " << x1 << std::endl << std::endl << "thanks for using this program" << std::endl;
83             return 0;
84         }
85         case '2': 
86         {
87             std::cout << std::endl << "Yep, we did it, first root that has this equation is: " << x1 << std::endl  << "while the second root is: "  << x2 <<
88             std::endl << std::endl << "thanks for using this program" << std::endl;
89             return 0;
90         }
91         case 'i': 
92         {
93             std::cout << std::endl << "your equation has infinite number of roots (like your iq)" << std::endl << std::endl << "thanks for using this program" << std::endl;
94             return 0;
95         }
96     }
97 }
.fi
.SS "char PrintEquation (int * a, int * b, int * c)"

.PP
.nf
386                                           {
387     assert(a != NULL);
388     assert(b != NULL);
389     assert(c != NULL);
390 
391     int i = 0;
392     int tmp_coefficient = 0;
393     bool sign_flag = 0;
394     std::vector <char> user_equation;
395     char tmp = ' ';
396 
397     std::cout << "Do you want to write your equation by yourself?{YES/NO}" << std::endl;
398 
399     std::cin\&.sync();
400     while(std::cin\&.get(tmp)) {
401 
402         user_equation\&.push_back(tmp);
403 
404         if (tmp == '\n'){
405             break;
406         }
407 
408     }
409 
410     if (user_equation[0] != 'Y' || user_equation[1] != 'E' || user_equation[2] != 'S')
411     {
412 
413         std::cout << "Write down coefficients of your equation" << std::endl;
414         std::cin >> *a >> *b >> *c;
415         return 'k';
416     }
417 
418     user_equation\&.resize(0);
419 
420     std::cout << "Now write your equation; example: 34x^2-51*x + 13213+24x^2= 0" << std::endl;
421 
422     std::cin\&.sync();
423     while(std::cin\&.get(tmp)) {
424 
425         if (tmp == 'X'){
426             tmp = tmp - 'A' + 'a';
427         }
428 
429         user_equation\&.push_back(tmp);
430 
431         if (tmp == '\n'){
432             break;
433         }
434 
435     }
436 
437     tmp = ' ';
438 
439     tmp = user_equation[i];
440 
441     while(tmp!='=' && tmp!='\n')
442     {
443         if(tmp != ' ' && tmp != '+' && tmp != '-')
444         {
445             if(tmp != 'x' && tmp != '*')
446             {
447                 tmp_coefficient = tmp_coefficient*10 + (tmp - '0');
448 
449             } else {
450                 if(tmp_coefficient == 0){
451                     ++tmp_coefficient;
452                 }
453                 if(tmp == '*'){
454                     ++i;
455                 }
456 
457                 if(user_equation[i+1] == '^'){
458 
459                     if (sign_flag == 0){
460                         *a += tmp_coefficient;
461                     } else
462                     {
463                         *a -= tmp_coefficient;
464                     }
465 
466                     sign_flag = 0;
467                     i += 2;
468                     tmp_coefficient = 0;
469                 }else
470                 {
471                     if (sign_flag == 0){
472                         *b += tmp_coefficient;
473                     } else
474                     {
475                         *b -= tmp_coefficient;
476                     }
477 
478                     sign_flag = 0;
479                     tmp_coefficient = 0;
480                 }
481 
482             }
483         }else
484         {
485             if (tmp_coefficient != 0){
486 
487                 if (sign_flag == 0){
488                     *c += tmp_coefficient;
489                 } else
490                 {
491                     *c -= tmp_coefficient;
492                 }
493 
494                 sign_flag = 0;
495                 tmp_coefficient = 0;
496             }
497 
498             if (tmp == '-'){
499                 sign_flag = 1;
500             }
501 
502         }
503 
504     ++i;
505     tmp = user_equation[i];
506 
507     }
508 
509     if (tmp_coefficient!=0){
510 
511         if(sign_flag == 0){
512             *c += tmp_coefficient;
513         } else {
514             *c -= tmp_coefficient;
515         }
516 
517     }
518 
519     return 'k';//where is k == ok
520 
521 }
.fi
.SS "char SolveSquareEquation (int a, int b, int c, double * x1, double * x2)"
variable used for calculate discriminate of square equation 
.PP
.nf
178                                                                      {
179     assert(x1 != NULL);
180     assert(x2 != NULL);
181 
182     switch(a)
183     {
184         case 0:
185         {
186             if (b == 0 && c == 0){
187                 return 'i';
188             }
189             if (b == 0 && c != 0){
190                 return '0';
191             }
192             *x1=-c/b;
193             return '1';
194         }
195         default:
196         {
197             double discriminate = 0; 
198             discriminate = b * b - 4 * a * c;
199             if ( discriminate >= 0 )
200             {
201                 *x1 = (- b - sqrt( discriminate ) )/(2 * a);
202                 *x2 = (- b + sqrt( discriminate ) )/(2 * a);
203                 if ( x2 - x1 < 0\&.0001 )
204                 {
205                     return '1';
206                 } else
207                 {
208                     return '2';
209                 }
210             } else
211             {
212                 return '0';
213             }
214         }
215 
216     }
217 
218 }
.fi
.SH "Variable Documentation"
.PP 
.SS "int a = 0"

.SS "int b = 0"

.SS "int c = 0"

.SS "double x1 = NAN"

.SS "double x2 = NAN"

.SH "Author"
.PP 
Generated automatically by Doxygen for solve_square_equation from the source code\&.
