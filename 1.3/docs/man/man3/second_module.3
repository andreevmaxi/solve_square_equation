.TH "second_module" 3 "Wed Jul 24 2019" "Version 1.3" "solve_square_equation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
second_module \- This function get's coefficients from wrote equation\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
This function get's coefficients from wrote equation\&. 


.PP
\fBAuthor:\fP
.RS 4
andreevmaxi 
.RE
.PP
\fBVersion:\fP
.RS 4
1\&.3 
.RE
.PP
\fBDate:\fP
.RS 4
july 2019 year 
.RE
.PP
\fBCopyright:\fP
.RS 4
korobcom
.RE
.PP
This is second head function in this program,
.PP
it's getting coefficients from printed equation by processing every symbol of it\&. At the end it print coefficients of this equation in a, b and c variables\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP it's integer variable of head member(coefficient) of equation which used in solve_square_equation function 
.br
\fIb\fP it's integer variable of second member(coefficient) of equation which used in solve_square_equation function 
.br
\fIc\fP it's integer variable of free member(coefficient) of equation which used in solve_square_equation function 
.br
\fIuser_equation\fP vector of chars which first it contains answer of user about want he to write equation by yourself or just coefficients second it's used in input of user's equations(after deleting information about previous user answer) 
.br
\fItmp\fP it's temperary char variable which used in inputing user_equation and than in processing of user_equation 
.RE
.PP
\fBReturns:\fP
.RS 4
If this function return char 'k', than everything is OK!
.RE
.PP
.PP
.nf
char PrintEquation(int* a, int* b, int* c){
    assert(a != NULL);
    assert(b != NULL);
    assert(c != NULL);

    int i = 0;
    int tmp_coefficient = 0;
    bool sign_flag = 0;
    vector <char> user_equation;
    char tmp = ' ';

    cout << "Do you want to write your equation by yourself?{YES/NO}" << endl;

    cin\&.sync();
    while(cin\&.get(tmp)) {

        user_equation\&.push_back(tmp);

        if (tmp == '\n'){
            break;
        }

    }

    if (user_equation[0] != 'Y' || user_equation[1] != 'E' || user_equation[2] != 'S')
    {

        cout << "Write down coefficients of your equation" << endl;
        cin >> *a >> *b >> *c;
        return 'k';
    }

    user_equation\&.resize(0);

    cout << "Now write your equation; example: 34x^2-51*x + 13213+24x^2= 0" << endl;

    cin\&.sync();
    while(cin\&.get(tmp)) {

        if (tmp == 'X'){
            tmp = tmp - 'A' + 'a';
        }

        user_equation\&.push_back(tmp);

        if (tmp == '\n'){
            break;
        }

    }

    tmp = ' ';

    tmp = user_equation[i];

    while(tmp!='=' && tmp!='\n')
    {
        if(tmp != ' ' && tmp != '+' && tmp != '-')
        {
            if(tmp != 'x' && tmp != '*')
            {
                tmp_coefficient = tmp_coefficient*10 + (tmp - '0');

            } else {
                if(tmp_coefficient == 0){
                    ++tmp_coefficient;
                }
                if(tmp == '*'){
                    ++i;
                }

                if(user_equation[i+1] == '^'){

                    if (sign_flag == 0){
                        *a += tmp_coefficient;
                    } else
                    {
                        *a -= tmp_coefficient;
                    }

                    sign_flag = 0;
                    i += 2;
                    tmp_coefficient = 0;
                }else
                {
                    if (sign_flag == 0){
                        *b += tmp_coefficient;
                    } else
                    {
                        *b -= tmp_coefficient;
                    }

                    sign_flag = 0;
                    tmp_coefficient = 0;
                }

            }
        }else
        {
            if (tmp_coefficient != 0){

                if (sign_flag == 0){
                    *c += tmp_coefficient;
                } else
                {
                    *c -= tmp_coefficient;
                }

                sign_flag = 0;
                tmp_coefficient = 0;
            }

            if (tmp == '-'){
                sign_flag = 1;
            }

        }

    ++i;
    tmp = user_equation[i];

    }

    if (tmp_coefficient!=0){

        if(sign_flag == 0){
            *c += tmp_coefficient;
        } else {
            *c -= tmp_coefficient;
        }

    }

    return 'k';//where is k == ok

}
.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for solve_square_equation from the source code\&.
